#!/usr/bin/env python

import control_msgs.msg
import numpy as np
import rospy
import trajectory_msgs.msg

speed = 0.03
dtime = 0.01
threshold = 0.005
maxdiff = 0.2

gains = [
    1,
    1,
    1,
    1,
    1,
    1,
    1,
]

velocities = False

controller_name = "/lwr"

rospy.init_node("lwr_teleop")
rate = rospy.Rate(100)

controller_state = False


def controller_state_collback(msg):
    global controller_state
    controller_state = msg


rospy.Subscriber(
    controller_name + "/state",
    control_msgs.msg.JointTrajectoryControllerState,
    controller_state_collback,
)

publisher = rospy.Publisher(
    controller_name + "/command", trajectory_msgs.msg.JointTrajectory, queue_size=10
)

fps = 500
frametime = 1.0 / fps

rrate = rospy.Rate(fps)

msg = False

iterations = 0
start_time = rospy.get_time()

while not rospy.is_shutdown():

    iterations = iterations + 1

    rrate.sleep()

    state = controller_state

    if state is False:
        print("waiting for controller")
        continue

    if msg is False:
        print("running")
        msg = trajectory_msgs.msg.JointTrajectory()
        msg.joint_names = state.joint_names
        msg.points.append(trajectory_msgs.msg.JointTrajectoryPoint())
        msg.points[-1].positions = list(state.desired.positions)
        msg.points[-1].time_from_start = rospy.rostime.Duration.from_sec(dtime)
        velocities = np.zeros(len(state.desired.positions))

    if True:
        msg2 = trajectory_msgs.msg.JointTrajectory()
        msg2.joint_names = msg.joint_names
        msg2.points = msg.points
        msg = msg2

    # print iterations, rospy.get_time() - start_time

    names = state.joint_names
    diffs = np.array(state.error.positions)

    if False:
        for i in xrange(len(diffs)):
            print(names[i], diffs[i])

    for i in xrange(len(diffs)):
        if np.abs(diffs[i]) >= maxdiff:
            print("ERROR")
            exit(0)
        diffs[i] = (
            min(maxdiff, max(0.0, (np.abs(diffs[i]) - threshold) * gains[i]))
            * speed
            * np.sign(diffs[i])
        )

    if False:
        for i in xrange(len(diffs)):
            print(names[i], diffs[i])

    # diffs = np.array(diffs)
    # velocities = velocities * pow(0.01, frametime) - diffs * frametime
    velocities = -diffs

    if True:
        # msg.points[-1].positions = list(np.array(msg.points[-1].positions) - np.array(diffs))
        msg.points[-1].positions = list(np.array(msg.points[-1].positions) + velocities)
        publisher.publish(msg)
        # print msg
