#!/usr/bin/env python
import rospy
import control_msgs.msg
import trajectory_msgs.msg
import numpy as np
import sensor_msgs.msg


class TeachMode:
    def __init__(self):
        self.fps = 100
        self.rrate = rospy.Rate(self.fps)
        self.controller_state = None
        self.joint_torques = None
        self.joint_positions = None
        self.command_positions = None
        rospy.Subscriber("/lwr/state", control_msgs.msg.JointTrajectoryControllerState,
                         self.controller_state_callback)
        rospy.Subscriber("/lwr/joint_states", sensor_msgs.msg.JointState, self.joint_state_callback)
        self.publisher = rospy.Publisher("lwr/command", trajectory_msgs.msg.JointTrajectory, queue_size=10)
        self.max_joint_diff = np.zeros(7)
        self.run_teach_mode()

    def run_teach_mode(self):
        dtime = 0.015
        torque_max = 20.0
        torque_threshold = 1.0
        diff_max = 2.0
        diff_threshold = 0.005
        v_threshold = 0.0
        torque_speed = 0.05
        diff_speed = 0.0
        torque_gains = np.array([0.8, 0.2, 1, 1, 5, 5, 10])
        msg = None
        while not rospy.is_shutdown():
            self.rrate.sleep()
            if self.controller_state is None:
                print("waiting for controller")
                continue
            if self.joint_torques is None:
                print("waiting for torques")
                continue
            if msg is None:
                print("running")
                msg = trajectory_msgs.msg.JointTrajectory()
                msg.joint_names = self.controller_state.joint_names
                msg.points.append(trajectory_msgs.msg.JointTrajectoryPoint())
                msg.points[-1].positions = list(self.controller_state.desired.positions)
                msg.points[-1].time_from_start = rospy.rostime.Duration.from_sec(dtime)

            diffs = np.array(self.controller_state.error.positions)

            for i in range(len(diffs)):
                if np.abs(diffs[i]) >= diff_max:
                    print("diffs[{}] is {}, diff max is {}".format(i, np.abs(diffs[i]), diff_max))
                    print("ERROR")
                    exit(0)
                diffs[i] = min(diff_max, max(0.0, (np.abs(diffs[i]) - diff_threshold))) * np.sign(diffs[i])

            torques = np.array(self.joint_torques)
            for i in range(len(torques)):
                torques[i] = (min(torque_max, max(0.0, (np.abs(torques[i]) - torque_threshold)))
                              * np.sign(torques[i]) * torque_gains[i])
            velocities = torques * torque_speed + diffs * diff_speed
            velocities = np.maximum(velocities * 0.0, np.abs(velocities) - v_threshold) * np.sign(velocities)
            self.command_positions = np.array(msg.points[-1].positions) - velocities * 1.0 / self.fps
            msg.points[-1].positions = list(self.command_positions)
            # joint_diff = np.abs(self.command_positions-self.joint_positions)
            # ind = np.where(joint_diff > self.max_joint_diff)[0]
            # self.max_joint_diff[ind] = joint_diff[ind]
            # rospy.loginfo("distance to current position {}".format(self.max_joint_diff))
            self.publisher.publish(msg)

    def controller_state_callback(self, msg):
        self.controller_state = msg

    def joint_state_callback(self, msg):
        self.joint_torques = msg.effort
        self.joint_positions = msg.position


if __name__ == "__main__":
    rospy.init_node("lwr_teleop")
    TeachMode()
